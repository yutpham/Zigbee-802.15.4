//*********************************************************************************************
//Module: MAC/mac_interfaces
//File Name: mac_primitives.h
//Description: This file also includes structures of MAC primitives
//Revision History:
//Date			Programmer		Details
//05/21/2006    VQ			Defined MAC constants and PIB Attributes 	
//*********************************************************************************************

#include "mac_types.h"
#include "mac_state.h"

#ifndef MAC_PRIMITIVES_H
#define MAC_PRIMITIVES_H


/***************************************************************************************************************/
//                                       MCPS-SAP Primitives
/***************************************************************************************************************/
//---------------------------------------------------------------------------------------------------------------
// MCPS-DATA.confirm structure
// reports the results of a request to transfer a data SPDU (MSDU) from a local SSCS entity to a sinfgle peer sccs entity
//---------------------------------------------------------------------------------------------------------------
void mcpsDataConfirm(    UINT8           msduHandle, // The handle associated with the MSDU being confirmed
                         MAC_STATUS      status);     // The status of the MSDU);
//---------------------------------------------------------------------------------------------------------------
// MCPS-DATA.request structure
// Requests the transfer of a data SPDU (ie.MSDU) from a local SSCS entity to a single peer SSCS entity
//---------------------------------------------------------------------------------------------------------------
MAC_STATUS mcpsDataRequest(   UINT8   SrcAddrMode,      // The source addressing mode for this primitive and subsequesnt MPDU. (00-03)
                              UINT16  SrcPANId,         // The 16bit PAN identifier of the entity from which the MSDU is being tranferred
                               ADDRESS* pSrcAddr,          // The individual device address of the entity from which the MSDU is being transferred
                        UINT8   DstAddrMode,      // The destination addressing mode for this primitive
                        UINT16  DstPANId,         // The 16bit PAN identifier of the entity to which the MSDU is being tranferred
                        ADDRESS* pDstAddr,          // The individual device address to which the MSDU is being tranferred
                        UINT8   msduLength,       // The number of octets forming the MSDU
                        BYTE    *msdu,            // The set of octets forming the MSDU
                        UINT8   msduHandle,       // The handle associated with the MSDU to transmitted by the MAC sublayer entity
                        BYTE    TxOptions);        // The transmission options for this MSDU

//---------------------------------------------------------------------------------------------------------------
// MCPS-DATA.indication structure
// reports the results of a request to transfer a data SPDU (MSDU) from a local SSCS entity to a sinfgle peer sccs entity
//---------------------------------------------------------------------------------------------------------------
void mcpsDataIndication(MCPS_DATA_INDICATION*  par_pDataIndication);

//---------------------------------------------------------------------------------------------------------------
// MCPS-PURGE.confirm structure
// allows the MAC sublayer to notify the next higher layer of the success of its request to purge an MSDU from transction queue
//---------------------------------------------------------------------------------------------------------------

void mcpsPurgeConfirm(    UINT8   msduHandle,  // The handle of the MSDU to be purged from the transaction queue
                          UINT16  status);      // The Status of the request to be purged from the transaction queue);
//---------------------------------------------------------------------------------------------------------------
// MCPS-PURGE.request structure
// generated by the next higher layer whenever a MSDU is to be purged from the transaction queue
//---------------------------------------------------------------------------------------------------------------
void mcpsPurgeRequest(UINT8   msduHandle);

//---------------------------------------------------------------------------------------------------------------


/***************************************************************************************************************/
//                                       MLME-SAP Primitive Definition
/***************************************************************************************************************/

//---------------------------------------------------------------------------------------------------------------
// MLME-SET.request structure
// is generated by the next higher layer and issued to its MLME to write the indicated MAC PIB attribute
//---------------------------------------------------------------------------------------------------------------
MAC_STATUS mlmeSetRequest(MAC_PIB_ATTR_ID   PIBAttribute,
                          void*             pPibAttributeValue);

//---------------------------------------------------------------------------------------------------------------
// MLME-GET.request structure
// requests information about a given PIB attribute
//---------------------------------------------------------------------------------------------------------------
MAC_STATUS mlmeGetRequest(MAC_PIB_ATTR_ID       PIBAttribute,          // The identifier of the PIB sttribute to read
                          void                  *pPibAttributeValue);  // The value of the PIB sttribute);



//---------------------------------------------------------------------------------------------------------------
// Association Status p.126 Table 68
//---------------------------------------------------------------------------------------------------------------
#define ASSOC_STATUS_SUCCESS                0x00
#define ASSOC_STATUS_PAN_AT_CAPACITY        0x01
#define ASSOC_STATUS_PAN_ACCESS_DENIED      0x02
//---------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------
// MLME-ASSOCIATE.request structure
// generated by the next higher of an unassociated device and issued to its MLME to request an association with a coordinator
//---------------------------------------------------------------------------------------------------------------
void mlmeAssociateRequest(UINT8   LogicalChannel,        // The logical channel on which to attempt association
                          UINT8   CoordAddrMode,         // The coordinator addressing mode for this primitive and subsequent MPDU
                          UINT16  CoordPANId,            // The identifier of PAN with which to associate
                          ADDRESS* CoordAddress,          // The address of the coordinator with which to associate
                          BYTE    CapabilityInformation, // Specifies the operational capabilities of the associating device
                          BOOL    SecurityEnable);        // TRUE if enabled);


//---------------------------------------------------------------------------------------------------------------
// MLME-ASSOCIATE.confirm structure
// initiated by MLME and issued to the next higher layer
//---------------------------------------------------------------------------------------------------------------
void mlmeAssociateConfirm(UINT16    AssocShortAddress, UINT8    status);
//---------------------------------------------------------------------------------------------------------------

void mlmeAssociateResponse(ADDRESS *deviceAddress, WORD assocShortAddress, UINT8 status, BOOL securityEnable);



//---------------------------------------------------------------------------------------------------------------
// DisAssociation Reason p.126 Table 69
//---------------------------------------------------------------------------------------------------------------
#define DISASSOC_REASON_RESERVED            0x00
#define DISASSOC_REASON_COORD_WISH          0x01
#define DISASSOC_REASON_DEVICE_WISH         0x02
//---------------------------------------------------------------------------------------------------------------
// MLME-DISASSOCIATE.request structure
// is used by an associated device to notify the coordinator of its intent to leave the PAN
//---------------------------------------------------------------------------------------------------------
void mlmeDisassociateRequest( QWORD    DeviceAddress,       // The address of the device to which to send the disassociation notification command
                              UINT8    DisassociateReason,   // The reason for disassociation
                              BOOL     SecurityEnable);       // TRUE if enabled for this transfer
                             
//---------------------------------------------------------------------------------------------------------------
// MLME-DISASSOCIATE.indication structure
// is used to indicate the reception of a disassociation notification command
//---------------------------------------------------------------------------------------------------------------
void mlmeDisassociateIndication(   QWORD*   DeviceAddress,        // The address of the device requesting disassociation
                                   UINT8    DisassociateReason,   // The reason for disassociation
                                   BOOL     SecurityUse,          // If MAC frame is using security
                                   UINT8    ACLEntry);             // The macSecurityMode parameter value  from the ACL entry associated with the sender of dataframe)
//---------------------------------------------------------------------------------------------------------------
// MLME-DISASSOCIATE.confirm structure
// reports the result of an MLME-disassociate.request primitive
//---------------------------------------------------------------------------------------------------------------
void mlmeDisassociateConfirm( MAC_STATUS    status);              // The status of the association attempt);
//---------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------
// MLME-BEACON-NOTIFY.indication structure
// is used to send parameters contained within a beacon frame received by the MAC sublayer to the next higher layer
//---------------------------------------------------------------------------------------------------------------
void mlmeBeaconNotifyIndication(MLME_BEACON_NOTIFY_INDICATION *pMLME_Beacon_Notify_Indication);
//---------------------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------------------
// Type of scan performed page 93
//---------------------------------------------------------------------------------------------------------------
#define ED_SCAN       0x00
#define ACTIVE_SCAN   0x01
#define PASSIVE_SCAN  0x02
#define ORPHAN_SCAN   0x03
//---------------------------------------------------------------------------------------------------------------
// MLME-SCAN.request structure
// is used to initiate a channel scan over a given list of channels
//---------------------------------------------------------------------------------------------------------------
void mlmeScanRequest(   UINT8      ScanType,       // Indicates the type of scan
                        DWORD      ScanChannels,   // The 5 MSBs are reserved. The 27 LSBs indicate which channels are to be scanned for each 27 valid channels
                        UINT16     ScanDuration);   // A value used to calculate the length of time to spend scanning each channel for ED, active, and passive scans
//---------------------------------------------------------------------------------------------------------------
// MLME-SCAN.confirm structure
// reports the resultof the channel scan request
//---------------------------------------------------------------------------------------------------------------
void mlmeScanConfirm(   MAC_STATUS              status,                                     // The status of the scan request
                        MAC_SCAN_RESULT*    par_pScanResult);                            // The list of PAN descriptors, one for each beacon found during an active or passive scan);
//---------------------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------------------
// MLME-GTS request structure
// allows a device to send a request to the PAN coordinator to allocate a new GTS or deallocate an existing GTS
//---------------------------------------------------------------------------------------------------------------
typedef struct{
    BYTE        GTSCharacteristics;    // The characteristics of GTS requests
    BOOL        SecurityEnable;        // If security is enabled for this transfer
}MLME_GTS_REQUEST;
void mlmeGTSRequest(MLME_GTS_REQUEST *pMLME_GTS_Request);
//---------------------------------------------------------------------------------------------------------------
// MLME-GTS.confirm structure
// reports the results of a request to allocate a new GTS or deallocate an exiting GTS
//---------------------------------------------------------------------------------------------------------------
typedef struct{
    BYTE        GTSCharacteristics;    // The characteristics of GTS requests
    UINT16      status;                // If security is enabled for this transfer
}MLME_GTS_CONFIRM;
void mlmeGTSConfirm(MLME_GTS_CONFIRM *pMLME_GTS_Confirm);
//---------------------------------------------------------------------------------------------------------------
// MLME-GTS.indication structure
// indicates that a GTS has been allocated or that a previously allocated
//---------------------------------------------------------------------------------------------------------------
typedef struct{
    UINT16      DevAddress;             // The short address of the device that has been allocated or deallocated a GTS
    BYTE        GTSCharacteristics;     // The characteristics of the GTS
    BOOL        SecurityUse;            // An indication of whether the received frame is using security
    UINT8        ACLEntry;               // The macSecurityMode parameter value from the ACL entry
}MLME_GTS_INDICATION;
void mlmeGTSIndication(MLME_GTS_INDICATION *pMLME_GTS_Indication);
//---------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------
// MLME-ORPHAN.indication structure
// allows the MLME of a coordinator to notify the next higher layer of the presence of an orphaned device
//---------------------------------------------------------------------------------------------------------------
void mlmeOrphanIndication(QWORD* pOrphanAddress, BOOL securityUse, UINT8 aclEntry);

//---------------------------------------------------------------------------------------------------------------
// MLME-ORPHAN.response structure
// reports the results of a request to allocate a new GTS or deallocate an exiting GTS
//---------------------------------------------------------------------------------------------------------------
void mlmeOrphanResponse(QWORD* pOrphanAddress, WORD shortAddress, 
                        BOOL associatedMember, BOOL securityEnable);



//---------------------------------------------------------------------------------------------------------------
// MLME-RESET.request structure
// generated by the next higher layer and issued to its MLME to request a reset of the MAC sublayer to its initial conditions
//---------------------------------------------------------------------------------------------------------------
 MAC_STATUS mlmeResetRequest(BOOL       SetDefaultPIB);    // If true the MACsublayer is reset and all MAC PIB attributes are set to their default values);
//---------------------------------------------------------------------------------------------------------------
// MLME-RESET.confirm structure
// is generated by the MLME and issued to its next higher layer in response to an MLME-RESET.request primitive and following the receiptof the PLME-SEt_TRX
//---------------------------------------------------------------------------------------------------------------
void mlmeResetConfirm (MAC_STATUS macStatus);
//---------------------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------------------
// MLME-RX-ENABLE.request structure
// primitive allows the next higher layer to request that the receiver is enable for a finite period of time
//---------------------------------------------------------------------------------------------------------------
void mlmeRxEnableRequest(BOOL DeferPermit, UINT32 RxOnTime, UINT32 RxOnDuration);

//---------------------------------------------------------------------------------------------------------------
// MLME-RX-ENABLE.confirm structure
// is generated by the MLME and issued to its next higher layer in response to an MLME-RX-ENABLE.request primitive
//---------------------------------------------------------------------------------------------------------------
void mlmeRXEnableConfirm(MAC_STATUS status);
//---------------------------------------------------------------------------------------------------------------

// //---------------------------------------------------------------------------------------------------------------
// // MLME-COMM-STATUS.indication structure
// // allows the MLME to indicate a communication status
// //---------------------------------------------------------------------------------------------------------------
// typedef struct{
//     UINT16     PANId;
//     UINT8      SrcAddrMode;
//     ADDRESS    SrcAddr;
//     UINT8      DstAddrMode;
//     ADDRESS    DstAddr;
//     UINT16     status;
// }MLME_COMM_STATUS_INDICATION;
// void mlmeCommStatusIndication(MLME_COMM_STATUS_INDICATION *pMLME_Comm_Status_Indication);
// //--------------------------------------------------------------------------------------------------------------

// //---------------------------------------------------------------------------------------------------------------
// // MLME-SYNC.request structure
// // is generated by the next higher layer of a device on a beacon-enabled PAN and issued to its MLME to synchronize with the coordinator
// //---------------------------------------------------------------------------------------------------------------
MAC_STATUS mlmeSyncRequest(  UINT8   LogicalChannel,   // The logical channel on which to attempt coordinator synchronization
                             BOOL    TrackBeacon);      // TRUE --> if the MLME is to synchronize with the next beacon and attempt to track all future beacons
// //---------------------------------------------------------------------------------------------------------------
// 
//---------------------------------------------------------------------------------------------------------------
// MLME-SYNC-LOSS.indication structure
// indicates the loss of synchronization with a coordinator
//---------------------------------------------------------------------------------------------------------------
 void mlmeSyncLossIndication(MAC_STATUS status);
//---------------------------------------------------------------------------------------------------------------

 
// //---------------------------------------------------------------------------------------------------------------
// // MLME-POLL.request structure
// // is generated by the next higher layer and issued to its MLME when data are to be requested from a coordinator
// //---------------------------------------------------------------------------------------------------------------
MAC_STATUS mlmePollRequest(BYTE coordAddrMode, ADDRESS *coordAddress, WORD coordPANId, BOOL securityEnable);

// //---------------------------------------------------------------------------------------------------------------
// // MLME-POLL.confirm structure
// // is generated by the MLME and issued to its next higher layer in response to an MLME-POLL.request primitive
// //---------------------------------------------------------------------------------------------------------------
void mlmePollConfirm(MAC_STATUS status);

#if     ZIGBEE_DEVICE_FFD == TRUE  
//---------------------------------------------------------------------------------------------------------------
//---                                           MLME-START.request                                                  
//---------------------------------------------------------------------------------------------------------------
// The MLME-START.request primitive makes a request for the device to start using a new superframe
// configuration.
//---------------------------------------------------------------------------------------------------------------
void mlmeStartRequest(WORD PanId,               UINT8 LogicalChannel,   UINT8   BeaconOrder, 
                      UINT8 SuperframeOrder,    BOOL PanCoordinator,    BOOL    BatteryLifeExtension, 
                      BOOL  CoordRealignment,   BOOL SecurityEnable,    UINT32  StartTime);

//---------------------------------------------------------------------------------------------------------------
//---                                           MLME-START.confirm
//---------------------------------------------------------------------------------------------------------------
// The MLME-START.confirm primitive is generated by the MLME and issued to its next higher layer in
// response to an MLME-START.request primitive.
//---------------------------------------------------------------------------------------------------------------
void mlmeStartConfirm(MAC_STATUS Status);

#endif  // ! ZIGBEE_DEVICE_FFD == TRUE  

#endif  //!MAC_PRIMITIVES_H
