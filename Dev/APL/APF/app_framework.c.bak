/*******************************************************************************/
//Module: 	                                                                   */   
//File Name: app_framework                                                     */
//Description: 	This file implements the application framework for zigbee app. */
//-----------------------------------------------------------------------------*/
//Revision History:                                                            */
//Date				Programmer		Details                                    */
//06/25/2007                                                  				   */
//-----------------------------------------------------------------------------*/
//  Copyright (C) 2006 - All Rights Reserved                                   */
/*******************************************************************************/

/************************************************************************/
/*					Include files										*/
/************************************************************************/
#include "app_framework.h"
#include "zconf.h"
#include "queue.h"
#include "schedul.h"
#include "aps.h"
#include "ep_conf.h"
/************************************************************************/
/*					Constant declaration								*/
/************************************************************************/

/************************************************************************/
/*					Type Definition										*/
/************************************************************************/


/************************************************************************/
/*					Variable declaration								*/
/************************************************************************/


/************************************************************************/
/*                      Static Function                                 */
/************************************************************************/


/************************************************************************/
/*                      Function                                        */
/************************************************************************/
/******************************************************************************/
//@FunctionName:  app_checkEP 										  	                  */
//@Description:	                                                              */
//	                                                                          */    
//@Param                                                                      */
//	                                                                          */   
/******************************************************************************/
 ENDPOINT_DESTCRIPTOR*  app_finEp(UINT8 EpId)
{
	/*********** Variable declaration ***********/

	/*********** Function body		 ***********/
    for (UINT8 i = 0;i< ZIGBEE_NUM_EP; i++)
        if (EndpointDescriptors[i].SimpleDescriptor.EndPoint == EpId)
            return &EndpointDescriptors[i];
    return NULL;
} // End of functions

/******************************************************************************/
//@FunctionName:   apf_dispatchEvent							              */
//@Description:	Manages Event handling in application framework               */
//	                                                                          */    
//@Param   par_pMsg -  ZAPP_MSG*                                              */
//	                                                                          */   
/******************************************************************************/
void apf_dispatchEvent(ZAPP_MSG*     par_pMsg)
{
	/*********** Variable declaration ***********/
	/*********** Function body		 ***********/

    /* Incoming data is broadcasting to endpoint */
    if (par_pMsg->EndPointId == EP_ID_BROADCAST)
    {
        /* Send message to application msg queue */
        for (int i=1;i<ZIGBEE_NUM_EP;i++)
        { 
            par_pMsg = (ZAPP_MSG*)par_pMsg;
            par_pMsg->EndPointId = EndpointDescriptors[i].SimpleDescriptor.EndPoint;
            schedul_sendMsg(TASK_APER_APP,par_pMsg);		
        }
    }
    /* Search for endpoint */
    else if (par_pMsg->EndPointId == EP_ID_ZDO)
        zdo_processEvent(par_pMsg);
    else
        /* Send message to application msg queue */
        schedul_sendMsg(TASK_APER_APP,par_pMsg);

} // End of functions


/******************************************************************************/
//@FunctionName:   apsdeDataConfirm						  	                  */
//@Description:	  Implements Data Confirm primitive                           */
//	                                                                          */    
//@Param:	DestAddrMode - Destination Adddress Mode                          */
//			DestAddr - Destination Address									  */
//			DstEndpoint - Destination Endpoint   							  */
//			SrcEndpoint - Source Endpoint       							  */
//			Status - the result of the request								  */
//	                                                                          */   
/******************************************************************************/
void apsdeDataConfirm(UINT8 DestAddrMode,ADDRESS* DestAddr,
                      BYTE  DstEndpoint, BYTE SrcEndpoint, 
                      APS_STATUS Status)
{
	/*********** Variable declaration ***********/
    ZAPP_MSG        appMsg;
	/*********** Function body		 ***********/
    appMsg.EndPointId   =   SrcEndpoint;
    appMsg.MsgType      =   APF_DATA_CONFIRM;
    appMsg.Data         =   DstEndpoint;
    apf_dispatchEvent(&appMsg);        
} // End of functions

/******************************************************************************/
//@FunctionName:   apsdDataIndication					  	                  */
//@Description:	   Implements the Data Indication primitive                   */
//	                                                                          */    
//@Param:                                                                     */
//	                                                                          */   
/******************************************************************************/
void apsdDataIndication(P_APS_FRM par_pFrm, UINT8 nDataLength, UINT8 SrcAddressMode, ADDRESS*  SrcAddr,
                        UINT8 LinkQuality, BYTE SecurityUse )
{
	/*********** Variable declaration ***********/
    ZAPP_MSG        appMsg;
    AF_IMCOM_FRM*   pAfFrm;
	/*********** Function body		 ***********/
    pAfFrm = apf_buildIncomFrm(par_pFrm, nDataLength,SrcAddressMode, 
                                SrcAddr, LinkQuality, SecurityUse);
    if (pAfFrm)
    {
        appMsg.EndPointId   =   par_pFrm->DestEndpoint;
        appMsg.MsgType      =   APF_DATA_INDICATION;
        appMsg.Data         =   pAfFrm;
        apf_dispatchEvent(&appMsg);        
    }
    /*Omit if can not build*/
} // End of functions
